
파이썬은 c언어와 다르게 모든 변수에 값이 직접 저장 되는 것이
아니라 포인터가 저장된다!
-> 변수에 들어있던 값이 바뀌면 새로운 객체를 만들어냄(c언어는 원래 있던 값을 없애버림)
쓰레기 값은 garbage collector 가 알아서 청소함
컴퓨터의 역할: 연산, 메모리 읽/쓰기(접근), 프로그램 시행순서 변경
연산: 연산자(산술,논리,관계), 수식
메모리 접근: 포인터(메모리 주소 +저장된 자료형 이름), 변수(메모리 저장장소 이름),자료형(값을 저장하는 방식)
순서제어: 조건문, 반복문

+ 추상화 틀(1. 함수 2. 구조체) ->> 클래스

c언어: 정적자료형 - 컴파일 때 결정(소스코드-> 기계어로 바뀔 때)
파이썬: 동적 자료형 - 프로그램 실행 중 결정
컬렉션 자료형: 문자열,리스트,튜플,딕셔너리,집합 ->C(create),R(,reading),U(update),D(delete)

포매팅 할때 print("%d + %d= %d" %(1,2,1+2))  이런식으로 튜플형으로 한꺼번에 저장

리스트에 값을 대입할 때, string은 값이 바로 들어가 있는 반면, 리스트는 포인터값이 들어가있음
mutable(변경 가능)
리스트는 key 가 0,1,2... 인 딕셔너리를 생각할 수 있음

파이썬에서는 여러개의 변수를 동시리턴가능(동시 반환시 튜플 형태로 반환됨)
추상화: 목적, 요약
클라스 이름은 항상 대문자로 시작
객체지향에서 관계연산자의 의미를 클래스 내에서 직접 지정할 수 있음(operator overloading)

자료구조
-선형: 요소관계가 1개
리스트 스택 큐 덱
-비선형: 요소관계 여러개
트리,그래프

휴리스틱(Heuristic, a rule of thumb)-최적의 해답은 아니지만 대충 맞음
추상자료형- 구현방법에 관심있는것이 아니라 무엇을 하느냐에 관심이 있음(인터페이스 계층)
                  구성요소가 뭔지 관계는 어떤지 수학적으로 표현

클래스 내에서 __str__ 정의를 하지 않으면 메모리가 반환됨 하지만 str 함수를 정의하고 print 를 찍으면 사용자가 정의한 리터럴을 반환할 수 있음
후위표기 수식 -> 스택이용, 매우 강력함

holistic - 전체적으로 한방에 보는거-> 컴퓨터는 안됨 

너비우선탐색 : 같은 레벨 순으로 서칭
깊이 우선 : 깊은 레벨로 들어가면서 서칭 ex) 피보나치수